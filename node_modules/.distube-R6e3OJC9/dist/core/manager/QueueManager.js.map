{"version":3,"file":"QueueManager.js","sourceRoot":"","sources":["../../../src/core/manager/QueueManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseManager } from \".\";\nimport { DisTubeError, Queue, RepeatMode } from \"../..\";\nimport type { DisTubeVoiceEvents, Song } from \"../..\";\nimport type { StageChannel, TextChannel, VoiceChannel } from \"discord.js\";\n\n/**\n * Queue manager\n */\nexport class QueueManager extends BaseManager<Queue> {\n  /**\n   * Create a {@link Queue}\n   * @private\n   * @param {Discord.VoiceChannel|Discord.StageChannel} channel A voice channel\n   * @param {Song|Song[]} song First song\n   * @param {Discord.TextChannel} textChannel Default text channel\n   * @returns {Promise<Queue|true>} Returns `true` if encounter an error\n   */\n  async create(\n    channel: VoiceChannel | StageChannel,\n    song: Song[] | Song,\n    textChannel?: TextChannel,\n  ): Promise<Queue | true> {\n    if (this.has(channel.guild.id)) throw new DisTubeError(\"QUEUE_EXIST\");\n    const voice = this.voices.create(channel);\n    const queue = new Queue(this.distube, voice, song, textChannel);\n    await queue.taskQueue.queuing();\n    try {\n      await voice.join();\n      this._voiceEventHandler(queue);\n      this.add(queue.id, queue);\n      this.emit(\"initQueue\", queue);\n      const err = await this.playSong(queue);\n      return err || queue;\n    } finally {\n      queue.taskQueue.resolve();\n    }\n  }\n  /**\n   * Get a Queue from this QueueManager.\n   * @method get\n   * @memberof QueueManager#\n   * @param {GuildIDResolvable} queue Resolvable thing from a guild\n   * @returns {Queue?}\n   */\n  /**\n   * Listen to DisTubeVoice events and handle the Queue\n   * @private\n   * @param {Queue} queue Queue\n   */\n  private _voiceEventHandler(queue: Queue) {\n    queue.listeners = {\n      disconnect: error => {\n        queue.delete();\n        this.emit(\"disconnect\", queue);\n        if (error) this.emitError(error, queue.textChannel);\n      },\n      error: error => this._handlePlayingError(queue, error),\n      finish: () => this._handleSongFinish(queue),\n    };\n    for (const event of Object.keys(queue.listeners) as (keyof DisTubeVoiceEvents)[]) {\n      queue.voice.on(event, queue.listeners[event]);\n    }\n  }\n  /**\n   * Handle the queue when a Song finish\n   * @private\n   * @param {Queue} queue queue\n   * @returns {Promise<void>}\n   */\n  private async _handleSongFinish(queue: Queue): Promise<void> {\n    this.emit(\"finishSong\", queue, queue.songs[0]);\n    await queue.taskQueue.queuing();\n    try {\n      if (queue.stopped) return;\n      if (queue.repeatMode === RepeatMode.QUEUE && !queue.prev) queue.songs.push(queue.songs[0]);\n      if (queue.prev) {\n        if (queue.repeatMode === RepeatMode.QUEUE) queue.songs.unshift(queue.songs.pop() as Song);\n        else queue.songs.unshift(queue.previousSongs.pop() as Song);\n      }\n      if (queue.songs.length <= 1 && (queue.next || queue.repeatMode === RepeatMode.DISABLED)) {\n        if (queue.autoplay) {\n          try {\n            await queue.addRelatedSong();\n          } catch {\n            this.emit(\"noRelated\", queue);\n          }\n        }\n        if (queue.songs.length <= 1) {\n          if (this.options.leaveOnFinish) queue.voice.leave();\n          if (!queue.autoplay) this.emit(\"finish\", queue);\n          queue.delete();\n          return;\n        }\n      }\n      const emitPlaySong = this._emitPlaySong(queue);\n      if (!queue.prev && (queue.repeatMode !== RepeatMode.SONG || queue.next)) {\n        const prev = queue.songs.shift() as Song;\n        delete prev.formats;\n        delete prev.streamURL;\n        if (this.options.savePreviousSongs) queue.previousSongs.push(prev);\n        else queue.previousSongs.push({ id: prev.id } as Song);\n      }\n      queue.next = queue.prev = false;\n      queue.beginTime = 0;\n      const err = await this.playSong(queue);\n      if (!err && emitPlaySong) this.emit(\"playSong\", queue, queue.songs[0]);\n    } finally {\n      queue.taskQueue.resolve();\n    }\n  }\n  /**\n   * Handle error while playing\n   * @private\n   * @param {Queue} queue queue\n   * @param {Error} error error\n   */\n  private _handlePlayingError(queue: Queue, error: Error) {\n    const song = queue.songs.shift() as Song;\n    try {\n      error.name = \"PlayingError\";\n      error.message = `${error.message}\\nID: ${song.id}\\nName: ${song.name}`;\n    } catch {}\n    this.emitError(error, queue.textChannel);\n    if (queue.songs.length > 0) {\n      this.playSong(queue).then(e => {\n        if (!e) this.emit(\"playSong\", queue, queue.songs[0]);\n      });\n    } else {\n      queue.stop();\n    }\n  }\n\n  /**\n   * Play a song on voice connection\n   * @private\n   * @param {Queue} queue The guild queue\n   * @returns {Promise<boolean>} error?\n   */\n  async playSong(queue: Queue): Promise<boolean> {\n    if (!queue) return true;\n    if (!queue.songs.length) {\n      queue.stop();\n      return true;\n    }\n    if (queue.stopped) return false;\n    queue.playing = true;\n    queue.paused = false;\n    const song = queue.songs[0];\n    try {\n      const { url, source, formats, streamURL } = song;\n      if (source === \"youtube\" && !formats) song._patchYouTube(await this.handler.getYouTubeInfo(url));\n      if (source !== \"youtube\" && !streamURL) {\n        for (const plugin of [...this.distube.extractorPlugins, ...this.distube.customPlugins]) {\n          if (await plugin.validate(url)) {\n            const info = [plugin.getStreamURL(url), plugin.getRelatedSongs(url)] as const;\n            const result = await Promise.all(info);\n            song.streamURL = result[0];\n            song.related = result[1];\n            break;\n          }\n        }\n      }\n      const stream = this.handler.createStream(queue);\n      queue.voice.play(stream);\n      song.streamURL = stream.url;\n      return false;\n    } catch (e: any) {\n      this._handlePlayingError(queue, e);\n      return true;\n    }\n  }\n  /**\n   * Whether or not emit playSong event\n   * @param {Queue} queue Queue\n   * @private\n   * @returns {boolean}\n   */\n  private _emitPlaySong(queue: Queue): boolean {\n    return (\n      !this.options.emitNewSongOnly ||\n      (queue.repeatMode === RepeatMode.SONG && queue.next) ||\n      (queue.repeatMode !== RepeatMode.SONG && queue.songs[0]?.id !== queue.songs[1]?.id)\n    );\n  }\n}\n"]}