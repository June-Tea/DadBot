{"version":3,"file":"DisTubeVoiceManager.js","sourceRoot":"","sources":["../../../src/core/voice/DisTubeVoiceManager.ts"],"names":[],"mappings":";;;AAAA,wBAAiC;AACjC,6BAAuC;AACvC,wCAAyC;AACzC,4CAA6E;AAI7E;;GAEG;AACH,MAAa,mBAAoB,SAAQ,qBAAyB;IAChE;;;;;;OAMG;IACH;;;;OAIG;IACH;;;;;OAKG;IACH,MAAM,CAAC,OAAoC;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC5C,IAAI,QAAQ,EAAE;YACZ,OAAO,QAAQ,CAAC;SACjB;QACD,OAAO,IAAI,eAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IACD;;;;OAIG;IACH,IAAI,CAAC,OAAoC;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC5C,IAAI,QAAQ;YAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IACrC,CAAC;IACD;;;OAGG;IACH,KAAK,CAAC,KAAwB;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,KAAK,EAAE,CAAC;SACf;aAAM;YACL,MAAM,UAAU,GAAG,IAAA,0BAAkB,EAAC,IAAA,kBAAc,EAAC,KAAK,CAAC,CAAC,CAAC;YAC7D,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,KAAK,6BAAqB,CAAC,SAAS,EAAE;gBAC7E,UAAU,CAAC,OAAO,EAAE,CAAC;aACtB;SACF;IACH,CAAC;CACF;AAnDD,kDAmDC;AAED,kBAAe,mBAAmB,CAAC","sourcesContent":["import { DisTubeVoice } from \".\";\nimport { resolveGuildID } from \"../..\";\nimport { BaseManager } from \"../manager\";\nimport { VoiceConnectionStatus, getVoiceConnection } from \"@discordjs/voice\";\nimport type { GuildIDResolvable } from \"../..\";\nimport type { StageChannel, VoiceChannel } from \"discord.js\";\n\n/**\n * Manages voice connections for {@link DisTube}\n */\nexport class DisTubeVoiceManager extends BaseManager<DisTubeVoice> {\n  /**\n   * Get a {@link DisTubeVoice}.\n   * @method get\n   * @memberof DisTubeVoiceManager#\n   * @param {GuildIDResolvable} queue The queue resolvable to resolve\n   * @returns {DisTubeVoice?}\n   */\n  /**\n   * Collection of {@link DisTubeVoice}.\n   * @name DisTubeVoiceManager#collection\n   * @type {Discord.Collection<string, DisTubeVoice>}\n   */\n  /**\n   * Create a {@link DisTubeVoice}\n   * @param {Discord.VoiceChannel|Discord.StageChannel} channel A voice channel to join\n   * @returns {DisTubeVoice}\n   * @private\n   */\n  create(channel: VoiceChannel | StageChannel): DisTubeVoice {\n    const existing = this.get(channel.guild.id);\n    if (existing) {\n      return existing;\n    }\n    return new DisTubeVoice(this, channel);\n  }\n  /**\n   * Join a voice channel\n   * @param {Discord.VoiceChannel|Discord.StageChannel} channel A voice channel to join\n   * @returns {Promise<DisTubeVoice>}\n   */\n  join(channel: VoiceChannel | StageChannel): Promise<DisTubeVoice> {\n    const existing = this.get(channel.guild.id);\n    if (existing) return existing.join(channel);\n    return this.create(channel).join();\n  }\n  /**\n   * Leave the connected voice channel in a guild\n   * @param {GuildIDResolvable} guild Queue Resolvable\n   */\n  leave(guild: GuildIDResolvable) {\n    const voice = this.get(guild);\n    if (voice) {\n      voice.leave();\n    } else {\n      const connection = getVoiceConnection(resolveGuildID(guild));\n      if (connection && connection.state.status !== VoiceConnectionStatus.Destroyed) {\n        connection.destroy();\n      }\n    }\n  }\n}\n\nexport default DisTubeVoiceManager;\n"]}