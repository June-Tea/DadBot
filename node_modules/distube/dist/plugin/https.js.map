{"version":3,"file":"https.js","sourceRoot":"","sources":["../../src/plugin/https.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,gFAAwD;AACxD,6BAA0B;AAC1B,0BAA0B;AAInB,MAAM,kBAAkB,GAAG,KAAK,EACrC,UAAsC,EACtC,GAAW,EACwB,EAAE,CACrC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;IAC9B,UAAU;SACP,GAAG,CAAC,GAAG,CAAC;SACR,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE;QACpB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC,CAAC;SACD,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC;AAXQ,QAAA,kBAAkB,sBAW1B;AAEE,MAAM,gBAAgB,GAAG,KAAK,EAAE,UAAsC,EAAE,QAAgB,EAAE,GAAW,EAAE,EAAE;IAC9G,IAAI,IAAI,SAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,QAAQ,EAAE;QACpD,OAAO,KAAK,CAAC;KACd;IACD,MAAM,OAAO,GAAG,MAAM,IAAA,0BAAkB,EAAC,UAAU,EAAE,GAAG,CAAC,EACvD,IAAI,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;IACjC,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,CAAC,OAAO,CAAC,EAAE;QAC7B,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAVW,QAAA,gBAAgB,oBAU3B;AAEF,4DAA4D;AACrD,MAAM,eAAe,GAAG,KAAK,EAAE,MAAc,EAAE,GAAW,EAAE,MAAmB,EAAE,EAAE;IACxF,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAC9B,OAAO,IAAI,QAAI,CACb;QACE,IAAI,EAAE,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,GAAG;QAChF,GAAG;KACJ,EACD,MAAM,EACN,MAAM,CACP,CAAC;AACJ,CAAC,CAAC;AAVW,QAAA,eAAe,mBAU1B;AAEF,MAAa,WAAY,SAAQ,yBAAe;IAC9C,KAAK,CAAC,QAAQ,CAAC,GAAW;QACxB,OAAO,IAAA,wBAAgB,EAAC,eAAK,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,MAAmB;QAC5C,OAAO,IAAA,uBAAe,EAAC,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAC;CACF;AARD,kCAQC;AAED,kBAAe,WAAW,CAAC","sourcesContent":["import https from \"https\";\nimport ExtractorPlugin from \"../struct/ExtractorPlugin\";\nimport { URL } from \"url\";\nimport { Song } from \"..\";\nimport type http from \"http\";\nimport type { GuildMember } from \"discord.js\";\n\nexport const getResponseHeaders = async (\n  httpModule: typeof http | typeof https,\n  url: string,\n): Promise<http.IncomingHttpHeaders> =>\n  new Promise((resolve, reject) => {\n    httpModule\n      .get(url)\n      .on(\"response\", res => {\n        resolve(res.headers);\n      })\n      .on(\"error\", reject);\n  });\n\nexport const validateAudioURL = async (httpModule: typeof http | typeof https, protocol: string, url: string) => {\n  if (new URL(url).protocol.toLowerCase() !== protocol) {\n    return false;\n  }\n  const headers = await getResponseHeaders(httpModule, url),\n    type = headers[\"content-type\"];\n  if (type?.startsWith(\"audio\")) {\n    return true;\n  }\n  return false;\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const resolveHttpSong = async (source: string, url: string, member: GuildMember) => {\n  url = url.replace(/\\/+$/, \"\");\n  return new Song(\n    {\n      name: url.substring(url.lastIndexOf(\"/\") + 1).replace(/((\\?|#).*)?$/, \"\") || url,\n      url,\n    },\n    member,\n    source,\n  );\n};\n\nexport class HTTPSPlugin extends ExtractorPlugin {\n  async validate(url: string) {\n    return validateAudioURL(https, \"https:\", url);\n  }\n\n  async resolve(url: string, member: GuildMember) {\n    return resolveHttpSong(\"https\", url, member);\n  }\n}\n\nexport default HTTPSPlugin;\n"]}