{"version":3,"file":"DisTubeHandler.js","sourceRoot":"","sources":["../../src/core/DisTubeHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import ytdl from \"@distube/ytdl-core\";\nimport ytpl from \"@distube/ytpl\";\nimport { DisTubeBase, DisTubeStream } from \".\";\nimport {\n  DisTubeError,\n  Playlist,\n  Queue,\n  SearchResult,\n  Song,\n  isMessageInstance,\n  isSupportedVoiceChannel,\n  isURL,\n  isVoiceChannelEmpty,\n} from \"..\";\nimport type { DisTube, OtherSongInfo } from \"..\";\nimport type { GuildMember, Message, StageChannel, TextChannel, VoiceChannel } from \"discord.js\";\n\n/**\n * DisTube's Handler\n * @extends DisTubeBase\n * @private\n */\nexport class DisTubeHandler extends DisTubeBase {\n  ytdlOptions: ytdl.downloadOptions;\n  constructor(distube: DisTube) {\n    super(distube);\n    this.ytdlOptions = this.options.ytdlOptions;\n\n    if (this.options.youtubeCookie) {\n      const requestOptions: any = {\n        headers: {\n          cookie: this.options.youtubeCookie,\n        },\n      };\n      if (this.options.youtubeIdentityToken) {\n        requestOptions.headers[\"x-youtube-identity-token\"] = this.options.youtubeIdentityToken;\n      }\n      Object.assign(this.ytdlOptions, { requestOptions });\n    }\n\n    const client = this.client;\n    if (this.options.leaveOnEmpty) {\n      client.on(\"voiceStateUpdate\", oldState => {\n        if (!oldState?.channel) return;\n        const queue = this.queues.get(oldState);\n        if (!queue) {\n          if (isVoiceChannelEmpty(oldState)) {\n            setTimeout(() => {\n              if (!this.queues.get(oldState) && isVoiceChannelEmpty(oldState)) this.voices.leave(oldState);\n            }, this.options.emptyCooldown * 1e3).unref();\n          }\n          return;\n        }\n        if (queue.emptyTimeout) {\n          clearTimeout(queue.emptyTimeout);\n          delete queue.emptyTimeout;\n        }\n        if (isVoiceChannelEmpty(oldState)) {\n          queue.emptyTimeout = setTimeout(() => {\n            delete queue.emptyTimeout;\n            if (isVoiceChannelEmpty(oldState)) {\n              queue.voice.leave();\n              this.emit(\"empty\", queue);\n              if (queue.stopped) queue.delete();\n            }\n          }, this.options.emptyCooldown * 1e3).unref();\n        }\n      });\n    }\n  }\n\n  /**\n   * Create a new guild queue\n   * @param {Discord.Message|Discord.VoiceChannel|Discord.StageChannel} message A user message | a voice channel\n   * @param {Song|Song[]} song Song to play\n   * @param {Discord.TextChannel} textChannel A text channel of the queue\n   * @throws {Error}\n   * @returns {Promise<Queue|true>} `true` if queue is not generated\n   */\n  async createQueue(\n    message: Message | VoiceChannel | StageChannel,\n    song: Song | Song[],\n    textChannel: TextChannel = (message as Message).channel as TextChannel,\n  ): Promise<Queue | true> {\n    const voice = (message as Message)?.member?.voice?.channel || message;\n    if (!voice || isMessageInstance(voice)) throw new DisTubeError(\"NOT_IN_VOICE\");\n    if (!isSupportedVoiceChannel(voice)) throw new DisTubeError(\"NOT_SUPPORTED_VOICE\");\n    return this.queues.create(voice, song, textChannel);\n  }\n\n  /**\n   * @param {string} url url\n   * @param {boolean} [basic=false] getBasicInfo?\n   * @returns {Promise<ytdl.videoInfo>}\n   */\n  getYouTubeInfo(url: string, basic = false): Promise<ytdl.videoInfo> {\n    if (basic) return ytdl.getBasicInfo(url, this.ytdlOptions);\n    return ytdl.getInfo(url, this.ytdlOptions);\n  }\n\n  /**\n   * Resolve a Song\n   * @param {Discord.GuildMember} member Requested user\n   * @param {string|Song|SearchResult|Playlist} song URL | Search string | {@link Song}\n   * @returns {Promise<Song|Playlist|null>} Resolved\n   */\n  async resolveSong(\n    member: GuildMember,\n    song: string | ytdl.videoInfo | Song | Playlist | SearchResult | OtherSongInfo | ytdl.relatedVideo | null,\n  ): Promise<Song | Playlist | null> {\n    if (!song) return null;\n    if (song instanceof Song || song instanceof Playlist) return song._patchMember(member);\n    if (song instanceof SearchResult) {\n      if (song.type === \"video\") return new Song(song, member);\n      return this.resolvePlaylist(member, song.url);\n    }\n    if (typeof song === \"object\") return new Song(song, member);\n    if (ytdl.validateURL(song)) return new Song(await this.getYouTubeInfo(song), member);\n    if (isURL(song)) {\n      for (const plugin of this.distube.extractorPlugins) {\n        if (await plugin.validate(song)) return plugin.resolve(song, member);\n      }\n      throw new DisTubeError(\"NOT_SUPPORTED_URL\");\n    }\n    throw new DisTubeError(\"CANNOT_RESOLVE_SONG\", typeof song);\n  }\n\n  /**\n   * Resole Song[] or url to a Playlist\n   * @param {Discord.GuildMember} member Requested user\n   * @param {Song[]|string} playlist Resolvable playlist\n   * @param {string} [source=\"youtube\"] Playlist source\n   * @returns {Promise<Playlist>}\n   */\n  async resolvePlaylist(\n    member: GuildMember,\n    playlist: Playlist | Song[] | string,\n    source = \"youtube\",\n  ): Promise<Playlist> {\n    if (playlist instanceof Playlist) return playlist;\n    let solvablePlaylist: Song[] | ytpl.result;\n    if (typeof playlist === \"string\") {\n      solvablePlaylist = await ytpl(playlist, { limit: Infinity });\n      (solvablePlaylist as any).items = solvablePlaylist.items\n        .filter(v => !v.thumbnail.includes(\"no_thumbnail\"))\n        .map(v => new Song(v as OtherSongInfo, member));\n    } else {\n      solvablePlaylist = playlist;\n    }\n    return new Playlist(solvablePlaylist, member, { source });\n  }\n\n  /**\n   * Create a custom playlist\n   * @returns {Promise<Playlist>}\n   * @param {Discord.Message|Discord.GuildMember} message A message from guild channel | A guild member\n   * @param {Array<string|Song|SearchResult>} songs Array of url, Song or SearchResult\n   * @param {Object} [properties={}] Additional properties such as `name`\n   * @param {boolean} [parallel=true] Whether or not fetch the songs in parallel\n   * @example\n   *     const songs = [\"https://www.youtube.com/watch?v=xxx\", \"https://www.youtube.com/watch?v=yyy\"];\n   *     const playlist = await distube.handler.createCustomPlaylist(member, songs, { name: \"My playlist name\" }, true);\n   *     // Or fetching custom playlist sequentially (reduce lag for low specs)\n   *     const playlist = await distube.handler.createCustomPlaylist(member, songs, false);\n   *     distube.playVoiceChannel(voiceChannel, playlist, { ... });\n   */\n  async createCustomPlaylist(\n    message: Message | GuildMember,\n    songs: (string | Song | SearchResult)[],\n    properties: any = {},\n    parallel = true,\n  ): Promise<Playlist> {\n    const member = (message as Message)?.member || (message as GuildMember);\n    if (!Array.isArray(songs)) throw new DisTubeError(\"INVALID_TYPE\", \"Array\", songs, \"songs\");\n    if (!songs.length) throw new DisTubeError(\"EMPTY_ARRAY\", \"songs\");\n    songs = songs.filter(\n      song => song instanceof Song || (song instanceof SearchResult && song.type === \"video\") || isURL(song),\n    );\n    if (!songs.length) throw new DisTubeError(\"NO_VALID_SONG\");\n    let resolvedSongs: Song[];\n    if (parallel) {\n      const promises = songs.map((song: string | Song | SearchResult) =>\n        this.resolveSong(member, song).catch(() => undefined),\n      );\n      resolvedSongs = (await Promise.all(promises)).filter((s: any): s is Song => !!s);\n    } else {\n      const resolved = [];\n      for (const song of songs) {\n        resolved.push(await this.resolveSong(member, song).catch(() => undefined));\n      }\n      resolvedSongs = resolved.filter((s: any): s is Song => !!s);\n    }\n    return new Playlist(resolvedSongs, member, properties);\n  }\n\n  /**\n   * Play / add a playlist\n   * @returns {Promise<void>}\n   * @param {Discord.Message|Discord.VoiceChannel|Discord.StageChannel} message A message | a voice channel\n   * @param {Playlist|string} playlist A YouTube playlist url | a Playlist\n   * @param {Discord.TextChannel|boolean} [textChannel] The default text channel of the queue\n   * @param {boolean} [skip=false] Skip the playing song (if exists) and play the added playlist instantly\n   * @param {boolean} [unshift=false] Add the playlist to the beginning of the queue (after the playing song if exists)\n   */\n  async handlePlaylist(\n    message: Message | VoiceChannel | StageChannel,\n    playlist: Playlist,\n    textChannel?: TextChannel,\n    skip = false,\n    unshift = false,\n  ): Promise<void> {\n    if (!(playlist instanceof Playlist)) throw new DisTubeError(\"INVALID_TYPE\", \"Playlist\", playlist, \"playlist\");\n    if (!this.options.nsfw && !textChannel?.nsfw) playlist.songs = playlist.songs.filter(s => !s.age_restricted);\n    if (!playlist.songs.length) {\n      if (!this.options.nsfw && !textChannel?.nsfw) throw new DisTubeError(\"EMPTY_FILTERED_PLAYLIST\");\n      throw new DisTubeError(\"EMPTY_PLAYLIST\");\n    }\n    const songs = playlist.songs;\n    const queue = this.queues.get(message);\n    if (queue) {\n      queue.addToQueue(songs, skip || unshift ? 1 : -1);\n      if (skip) queue.skip();\n      else this.emit(\"addList\", queue, playlist);\n    } else {\n      const newQueue = await this.createQueue(message, songs, textChannel);\n      if (newQueue instanceof Queue) {\n        if (this.options.emitAddListWhenCreatingQueue) this.emit(\"addList\", newQueue, playlist);\n        this.emit(\"playSong\", newQueue, newQueue.songs[0]);\n      }\n    }\n  }\n\n  /**\n   * Search for a song, fire {@link DisTube#event:error} if not found.\n   * @param {Discord.Message} message A message from guild channel\n   * @param {string} query The query string\n   * @returns {Promise<SearchResult?>} Song info\n   */\n  async searchSong(message: Message, query: string): Promise<SearchResult | null> {\n    if (this.options.searchSongs > 1) {\n      const searchEvents = [\n        \"searchNoResult\",\n        \"searchResult\",\n        \"searchCancel\",\n        \"searchInvalidAnswer\",\n        \"searchDone\",\n      ] as const;\n      for (const evn of searchEvents) {\n        if (this.distube.listenerCount(evn) === 0) {\n          /* eslint-disable no-console */\n          console.warn(`\"searchSongs\" option is disabled due to missing \"${evn}\" listener.`);\n          console.warn(\n            `If you don't want to use \"${evn}\" event, simply add an empty listener (not recommended):\\n` +\n              `<DisTube>.on(\"${evn}\", () => {})`,\n          );\n          /* eslint-enable no-console */\n          this.options.searchSongs = 0;\n        }\n      }\n    }\n    const limit = this.options.searchSongs > 1 ? this.options.searchSongs : 1;\n    const results = await this.distube\n      .search(query, {\n        limit,\n        safeSearch: this.options.nsfw ? false : !(message.channel as TextChannel)?.nsfw,\n      })\n      .catch(() => {\n        if (!this.emit(\"searchNoResult\", message, query)) {\n          // eslint-disable-next-line no-console\n          console.warn(\"searchNoResult event does not have any listeners! Emits `error` event instead.\");\n          throw new DisTubeError(\"NO_RESULT\");\n        }\n      });\n    if (!results) return null;\n    let result = results[0];\n    if (limit > 1) {\n      this.emit(\"searchResult\", message, results, query);\n      const c = message.channel;\n      const answers = await (c.awaitMessages.length === 0\n        ? c.awaitMessages({\n            filter: (m: Message) => m.author.id === message.author.id,\n            max: 1,\n            time: this.options.searchCooldown * 1e3,\n            errors: [\"time\"],\n          })\n        : (c.awaitMessages as any)((m: Message) => m.author.id === message.author.id, {\n            max: 1,\n            time: this.options.searchCooldown * 1e3,\n            errors: [\"time\"],\n          })\n      ).catch(() => undefined);\n      const ans = answers?.first();\n      if (!ans) {\n        this.emit(\"searchCancel\", message, query);\n        return null;\n      }\n      const index = parseInt(ans.content, 10);\n      if (isNaN(index) || index > results.length || index < 1) {\n        this.emit(\"searchInvalidAnswer\", message, ans, query);\n        return null;\n      }\n      this.emit(\"searchDone\", message, ans, query);\n      result = results[index - 1];\n    }\n    return result;\n  }\n\n  /**\n   * Create a ytdl stream\n   * @param {Queue} queue Queue\n   * @returns {DisTubeStream}\n   */\n  createStream(queue: Queue): DisTubeStream {\n    const { duration, formats, isLive, source, streamURL } = queue.songs[0];\n    const filterArgs: string[] = [];\n    queue.filters.forEach((filter: string | number) => filterArgs.push(this.distube.filters[filter]));\n    const ffmpegArgs = queue.filters?.length ? [\"-af\", filterArgs.join(\",\")] : undefined;\n    const seek = duration ? queue.beginTime : undefined;\n    const streamOptions = { ffmpegArgs, seek, isLive };\n    Object.assign(streamOptions, this.ytdlOptions);\n    if (source === \"youtube\") return DisTubeStream.YouTube(formats, streamOptions);\n    return DisTubeStream.DirectLink(streamURL as string, streamOptions);\n  }\n}\n\nexport default DisTubeHandler;\n"]}