{"version":3,"file":"ExtractorPlugin.js","sourceRoot":"","sources":["../../src/struct/ExtractorPlugin.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA8B;AAC9B,0BAAgC;AAIhC;;;;GAIG;AACH,MAAsB,eAAgB,SAAQ,gBAAM;IAApD;;QACE,SAAI,GAAG,cAAU,CAAC,SAAS,CAAC;IAM9B,CAAC;CAAA;AAPD,0CAOC;AAED;;;;;;;;;GASG;AAEH,kBAAe,eAAe,CAAC","sourcesContent":["import Plugin from \"./Plugin\";\nimport { PluginType } from \"..\";\nimport type { Playlist, Song } from \".\";\nimport type { GuildMember } from \"discord.js\";\n\n/**\n * Extractor Plugin\n * @extends Plugin\n * @abstract\n */\nexport abstract class ExtractorPlugin extends Plugin {\n  type = PluginType.EXTRACTOR;\n  /**\n   * Resolve the validated url to a {@link Song} or a {@link Playlist}.\\\n   * Not needed to add {@link Song#related} because it will be added with {@link Plugin#getRelatedSongs}.\n   */\n  abstract resolve(url: string, member: GuildMember): Promise<Song | Playlist>;\n}\n\n/**\n * Resolve the validated url to a {@link Song} or a {@link Playlist}.\\\n * Not needed to add {@link Song#related} because it will be added with {@link Plugin#getRelatedSongs}.\n * @param {string} url URL\n * @param {Discord.GuildMember} member Requested user\n * @returns {Promise<Song|Song[]|Playlist>}\n * @method resolve\n * @memberof ExtractorPlugin#\n * @abstract\n */\n\nexport default ExtractorPlugin;\n"]}